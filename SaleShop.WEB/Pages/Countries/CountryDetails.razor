@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (country is null)
{
    <div class="spinner"/>
}
else
{
	<div class="card">
		<div class="card-header">
			<span>
                <i class="oi oi-globe"></i> @country.Name
                <a class="btn btn-success float-end" href="/countries"><i class="oi oi-arrow-thick-left"></i> Regresar</a>
                <a class="btn btn-sm btn-primary float-end" href="/states/create/@country.Id"><i class="oi oi-plus"></i> Agregar Provincia</a>
			</span>
		</div>
		<div class="card-body">
			<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
				<div>
					<input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar país..." @bind-value="Filter" />
				</div>
				<div class="mx-1">
					<button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
					<button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
				</div>
			</div>

			<Pagination CurrentPage="currentPage"
					TotalPages="totalPages"
					SelectedPage="SelectedPageAsync" />

			<GenericList MyList="states!">
				<Body>
					<table class="table table-striped">
						<thead>
							<tr>
								<th>Provincia</th>
								<th style="width:220px">Ciudades</th>
								<th style="width:260px">Opciones</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var state in states!)
							{
								<tr>
									<td>
										@state.Name
									</td>
									<td>
										@state.CitiesNumber
									</td>
									<td>
										<a href="/states/details/@state.Id" class="btn btn-info btn-sm"><i class="oi oi-list" /> Detalles</a>
										<a href="/states/edit/@state.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
										<button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(state.Id))><i class="oi oi-trash" /> Borrar</button>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</Body>
			</GenericList>
		</div>
	</div>
}

@code {
    private Country? country;
    private List<State>? states;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/states?id={Id}&page={page}";
            url2 = $"api/states/totalPages?id={Id}";
        }
        else
        {
            url1 = $"api/states?id={Id}&page={page}&filter={Filter}";
            url2 = $"api/states/totalPages?id={Id}&filter={Filter}";
        }

        var responseHppt = await repository.GetAsync<Country>($"api/countries/{Id}");
        var responseHppt2 = await repository.GetAsync<List<State>>(url1);
        var responseHppt3 = await repository.GetAsync<int>(url2);
        country = responseHppt.Response;
        states = responseHppt2.Response;
        totalPages = responseHppt3.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Borrar Provincia..",
                Text = "Esta seguro que deseas borrar la Provincia?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si",
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm) return;

        var responseHttp = await repository.DeleteAsync($"/api/states/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

}
