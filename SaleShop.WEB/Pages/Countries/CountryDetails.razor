@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (country is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>@country.Name</h3>
    <div class="mb-3">
        <a class="btn btn-primary" href="/states/create/@country.Id">Nueva Provincia</a>
        <a class="btn btn-success" href="/countries">Regresar</a>
    </div>

    <Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />

    <GenericList MyList="states!">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Provincia</th>
                        <th style="width:220px">Ciudades</th>
                        <th style="width:260px">Opciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var state in states!)
                    {
                        <tr>
                            <td>
                                @state.Name
                            </td>
                            <td>
                                @state.CitiesNumber
                            </td>
                            <td>
                                <a class="btn btn-info" href="/states/details/@state.Id">Detalle</a>
                                <a class="btn btn-warning" href="/states/edit/@state.Id">Editar</a>
                                <button class="btn btn-danger" @onclick="(()=> DeleteAsync(state.Id))">Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

@code {
    private Country? country;
    private List<State>? states;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        string url1 = $"api/states?id={Id}&page={page}";
        string url2 = $"api/states/totalPages?id={Id}";
        var responseHppt = await repository.GetAsync<Country>($"api/countries/{Id}");
        var responseHppt2 = await repository.GetAsync<List<State>>(url1);
        var responseHppt3 = await repository.GetAsync<int>(url2);
        country = responseHppt.Response;
        states = responseHppt2.Response;
        totalPages = responseHppt3.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Borrar Provincia..",
                Text = "Esta seguro que deseas borrar la Provincia?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si",
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm) return;

        var responseHttp = await repository.DeleteAsync($"/api/states/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}
