@page "/countries"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<h3>Paises</h3>

<div class="mb-3">
    <a class="btn btn-primary mb-3" href="/countries/create">Nuevo País</a>
</div>

<GenericList MyList="Countries">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>País</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        <td>
                            <a class="btn btn-warning" href="/countries/edit/@country.Id">Editar</a>
                            <button class="btn btn-danger" @onclick="(()=> DeleteAsync(country.Id))">Borrar</button>
                        </td>
                        <td>
                            @country.Name
                        </td>
                    </tr>   
                }
            </tbody>
        </table>
    </Body>
</GenericList>



@code {
    private List<Country>? Countries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Country>>("/api/countries");
        Countries = responseHttp.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Borrar Pais..",
                Text = "Esta seguro que deseas borrar el Pais?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si",
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm) return;

        var responseHttp = await repository.DeleteAsync($"/api/countries/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}

