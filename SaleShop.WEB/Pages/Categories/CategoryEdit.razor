@page "/categories/edit/{id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Editar Categoria</h3>

@if (category is null)
{
	<p>Cargando...</p>
}
else
{
	<CategoryForm @ref="categoryForm" Category="category" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
	private Category? category;
	private CategoryForm? categoryForm;

	[Parameter]
	public int Id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var responseHttp = await repository.GetAsync<Category>($"/api/categories/{Id}");

		if (responseHttp.Error)
		{
			if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
			{
				navigationManager.NavigateTo("/categories");
				return;
			}
			var message = await responseHttp.GetErrorMessageAsync();
			await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			return;
		}

		category = responseHttp.Response;
	}

	private async Task EditAsync()
	{
		var httpResponse = await repository.PutAsync("/api/categories", category);
		if (httpResponse.Error)
		{
			var message = await httpResponse.GetErrorMessageAsync();
			await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
			return;
		}

		Return();
	}
	private void Return()
	{
		categoryForm!.FormPostedSuccessfully = true;
		navigationManager.NavigateTo("/categories");
	}
}
