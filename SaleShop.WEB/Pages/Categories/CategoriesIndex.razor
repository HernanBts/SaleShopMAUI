@page "/categories"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

<h3>Categorias</h3>

<div class="mb-3">
    <a class="btn btn-primary mb-3" href="/categories/create">Nueva Categoria</a>
</div>

<GenericList MyList="Categories">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Categoria</th>
                    <th>Opciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Categories!)
                {
                    <tr>
                        <td>
                            @category.Name
                        </td>
                        <td>
                            <a class="btn btn-warning" href="/categories/edit/@category.Id">Editar</a>
                            <button class="btn btn-danger" @onclick="(()=> DeleteAsync(category.Id))">Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>



@code {
    private List<Category>? Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<List<Category>>("/api/categories");
        Categories = responseHttp.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Borrar Categoria..",
                Text = "Esta seguro que deseas borrar la categoria?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si",
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm) return;

        var responseHttp = await repository.DeleteAsync($"/api/categories/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}

